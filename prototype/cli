#!/bin/python
from parser import parse
from lexer import lex
from core import List, Symbol, ListBuilder
from evaluator import eval_each, eval, Call_Node, Context
from intrinsics import build_scope
import os
import sys
import traceback

def extract_offense(range, program):
    p_line_start = None
    p_index_start = 0
    p_line_end = None
    p_index_end = 0
    
    lines = 0
    columns = 0
    index = 0

    for c in program:
        index += 1
        columns += 1
        if c == "\n":
            lines += 1
            columns = 0

        if lines == range.start.line and p_line_start == None:
            p_line_start = index
        if lines == range.end.line:
            p_line_end = index

        if lines == range.start.line and columns == range.start.column:
            p_index_start = index
        if lines == range.end.line and columns == range.end.column:
            p_index_end = index

    offense = program[p_line_start:p_index_start]
    offense += "\033[0;31m"
    offense += program[p_index_start:p_index_end]
    offense += "\033[0m"
    offense += program[p_index_end:p_line_end]

    return offense

def get_guira_files(directory_path):
    files_contents = {}
    
    for root, _, files in os.walk(directory_path):
        for file in files:
            if file.endswith(".guira"):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        modname = file[:len(file)-6] # removes ".guira"
                        files_contents[modname] = f.read()
                except Exception:
                    print(f"Could not parse file {file_path}:\n{traceback.format_exc()}")
    
    return files_contents

def get_root_dir(file_path):
    abs_path = os.path.abspath(file_path)
    components = abs_path.split(os.sep)
    if components:
        path = os.sep.join(components[:len(components)-1])
        return path
    else:
        return None

def test():
    a = List(Symbol("a"), None)
    b = List(Symbol("b"), None)
    c = List(Symbol("c"), None)

    builder = ListBuilder()
    builder.append(a)
    builder.append(b)
    builder.append(c)
    list = builder.list()
    print(list)

def eval_file(file_path):
    if not file_path.endswith(".guira"):
        print("not a guira file")
        return
    root = get_root_dir(file_path)
    if root == None:
        print("invalid file path")
        return
    modname = os.path.basename(file_path)
    modname = modname[:len(modname)-6] # removes ".guira"
    files = get_guira_files(root)

    builtins = build_scope()
    ctx = Context(builtins)

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            file_contents = f.read()
            res = parse(file_path, file_contents, False)
            if res.failed():
                print(res.error)
            else:
                res = eval_each(ctx, res.value)
                if res.failed():
                    print(res.error)
                else:
                    print(res.value)
    except Exception:
        print(f"Could not parse file {file_path}:\n{traceback.format_exc()}")

def parse_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            file_contents = f.read()
            res = parse(file_path, file_contents, False)
            if res.failed():
                print(res.error)
            else:
                print(res.value)
    except Exception:
        print(f"Could not parse file {file_path}:\n{traceback.format_exc()}")

def lex_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            file_contents = f.read()
            tks = lex(file_path, file_contents)
            for tk in tks:
                print(tk)
    except Exception:
        print(f"Could not lex file {file_path}:\n{traceback.format_exc()}")

def get_guira_file_names(directory_path):
    file_names = []
    
    for root, _, files in os.walk(directory_path):
        for file in files:
            if file.endswith(".guira"):
                file_path = os.path.join(root, file)
                file_names += [file_path]
    return file_names

def test_whole_dir(folder_path):
    files = get_guira_file_names(folder_path)
    for file in files:
        parse_file(file)
    
if __name__ == "__main__":
    if len(sys.argv) == 2:
        file_path = sys.argv[1]
        eval_file(file_path)
    elif len(sys.argv) == 3:
        keyword = sys.argv[1]
        if keyword == "test":
            folder = sys.argv[2]
            test_whole_dir(folder)
        elif keyword == "parse":
            file = sys.argv[2]
            parse_file(file)
        elif keyword == "lex":
            file = sys.argv[2]
            lex_file(file)
        else:
            print("invalid parameters")
    else:
        print("no arguments provided")

